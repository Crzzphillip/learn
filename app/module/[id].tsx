import React, { useState, useEffect } from "react";
import { View, Text, ScrollView, Pressable } from "react-native";
import { useLocalSearchParams, useRouter } from "expo-router";
import { ArrowLeft, CheckCircle, HelpCircle } from "lucide-react-native";
import * as mockData from "@/utils/mockData";
import { CourseModule, Quiz } from "@/types/book";

export default function ModuleScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  const [module, setModule] = useState<CourseModule | null>(null);
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [showQuiz, setShowQuiz] = useState(false);

  useEffect(() => {
    if (id) {
      const moduleData = mockData.getModule(id);
      if (moduleData) {
        setModule(moduleData);

        // Check if a quiz exists for this module
        const quizData = mockData.getQuizByModule(id);
        if (quizData) {
          setQuiz(quizData);
        } else {
          // Create a mock quiz if none exists
          const newQuiz = {
            id: `quiz-${Date.now()}`,
            moduleId: id,
            completed: false,
            questions: [
              {
                id: `q-${Date.now()}-1`,
                question: `What is the main topic of ${moduleData.title}?`,
                options: [
                  "Personal Finance",
                  "Habit Formation",
                  "Psychological Principles",
                  "Economic Theory",
                ],
                correctAnswer: 2,
              },
              {
                id: `q-${Date.now()}-2`,
                question:
                  "According to the module, what is most important for long-term success?",
                options: [
                  "Intelligence",
                  "Education",
                  "Consistent habits",
                  "Luck",
                ],
                correctAnswer: 2,
              },
              {
                id: `q-${Date.now()}-3`,
                question: "What approach does the author recommend?",
                options: [
                  "Focus on short-term gains",
                  "Make dramatic changes quickly",
                  "Start with small, sustainable changes",
                  "Copy successful people exactly",
                ],
                correctAnswer: 2,
              },
            ],
          };

          mockData.addQuiz(newQuiz);
          setQuiz(newQuiz);
        }
      }
    }
  }, [id]);

  const handleMarkComplete = () => {
    if (module) {
      mockData.markModuleComplete(module.id);
      setModule({ ...module, completed: true });
    }
  };

  const handleStartQuiz = () => {
    setShowQuiz(true);
  };

  if (!module) {
    return (
      <View className="flex-1 items-center justify-center">
        <Text>Loading...</Text>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-white">
      <View className="bg-white p-4 flex-row items-center border-b border-gray-200">
        <Pressable onPress={() => router.back()} className="mr-3">
          <ArrowLeft size={24} color="#000" />
        </Pressable>
        <Text className="text-lg font-bold flex-1" numberOfLines={1}>
          {module.title}
        </Text>
        {module.completed && <CheckCircle size={20} color="#10b981" />}
      </View>

      {showQuiz ? (
        <QuizView
          quiz={quiz}
          moduleId={module.id}
          onComplete={() => {
            setShowQuiz(false);
            handleMarkComplete();
          }}
        />
      ) : (
        <ScrollView className="flex-1 p-6">
          <Text className="text-lg mb-6">{module.content}</Text>

          <View className="bg-blue-50 p-4 rounded-lg mb-6 flex-row">
            <HelpCircle size={24} color="#3b82f6" />
            <Text className="ml-3 text-gray-700">
              This content was generated by AI based on the book. You can ask
              questions about this module to get more detailed explanations.
            </Text>
          </View>

          <View className="flex-row mt-4">
            <Pressable
              className="flex-1 bg-white border border-blue-500 py-3 rounded-lg items-center mr-2"
              onPress={() => router.push(`/ask?moduleId=${module.id}`)}
            >
              <Text className="text-blue-500 font-bold">Ask Questions</Text>
            </Pressable>

            <Pressable
              className="flex-1 bg-blue-500 py-3 rounded-lg items-center ml-2"
              onPress={handleStartQuiz}
            >
              <Text className="text-white font-bold">Take Quiz</Text>
            </Pressable>
          </View>
        </ScrollView>
      )}
    </View>
  );
}

type QuizViewProps = {
  quiz: Quiz | null;
  moduleId: string;
  onComplete: () => void;
};

function QuizView({ quiz, moduleId, onComplete }: QuizViewProps) {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<{
    [key: string]: number;
  }>({});
  const [showResults, setShowResults] = useState(false);
  const [score, setScore] = useState(0);

  if (!quiz) return null;

  const currentQuestion = quiz.questions[currentQuestionIndex];
  const totalQuestions = quiz.questions.length;
  const isLastQuestion = currentQuestionIndex === totalQuestions - 1;

  const handleSelectAnswer = (answerIndex: number) => {
    setSelectedAnswers((prev) => ({
      ...prev,
      [currentQuestion.id]: answerIndex,
    }));
  };

  const handleNextQuestion = () => {
    if (isLastQuestion) {
      // Calculate score
      let correctCount = 0;
      quiz.questions.forEach((question) => {
        if (selectedAnswers[question.id] === question.correctAnswer) {
          correctCount++;
        }
      });

      const calculatedScore = Math.round((correctCount / totalQuestions) * 100);
      setScore(calculatedScore);

      // Update quiz in mock data
      const updatedQuiz = {
        ...quiz,
        completed: true,
        score: calculatedScore,
        questions: quiz.questions.map((q) => ({
          ...q,
          userAnswer: selectedAnswers[q.id],
        })),
      };

      mockData.updateQuiz(quiz.id, updatedQuiz);

      // Update book progress
      const module = mockData.getModule(moduleId);
      if (module) {
        const modules = mockData.getModulesByBook(module.bookId);
        const completedModules = modules.filter(
          (m) => m.completed || m.id === moduleId,
        ).length;
        const progress = Math.round((completedModules / modules.length) * 100);
        mockData.updateBookProgress(module.bookId, progress);
      }

      setShowResults(true);
    } else {
      setCurrentQuestionIndex((prev) => prev + 1);
    }
  };

  if (showResults) {
    return (
      <ScrollView className="flex-1 p-6">
        <View className="items-center mb-6">
          <View className="bg-blue-100 rounded-full p-4 mb-4">
            <CheckCircle size={40} color="#3b82f6" />
          </View>
          <Text className="text-2xl font-bold mb-2">Quiz Completed!</Text>
          <Text className="text-gray-600 mb-4">Your score: {score}%</Text>

          <View className="bg-gray-100 rounded-full h-2 w-full mb-6">
            <View
              className="bg-blue-500 h-full rounded-full"
              style={{ width: `${score}%` }}
            />
          </View>
        </View>

        <Text className="text-lg font-bold mb-4">Question Review:</Text>

        {quiz.questions.map((question, index) => {
          const userAnswer = selectedAnswers[question.id];
          const isCorrect = userAnswer === question.correctAnswer;

          return (
            <View key={question.id} className="mb-4 p-4 bg-gray-50 rounded-lg">
              <Text className="font-bold mb-2">
                Question {index + 1}: {question.question}
              </Text>

              {question.options.map((option, optIndex) => (
                <View
                  key={optIndex}
                  className={`p-3 mb-2 rounded-lg flex-row items-center ${optIndex === userAnswer ? (isCorrect ? "bg-green-100" : "bg-red-100") : "bg-white border border-gray-200"} ${optIndex === question.correctAnswer && !isCorrect ? "border-green-500 border-2" : ""}`}
                >
                  <Text
                    className={`flex-1 ${optIndex === userAnswer ? (isCorrect ? "text-green-800" : "text-red-800") : ""}`}
                  >
                    {option}
                  </Text>

                  {optIndex === userAnswer && !isCorrect && (
                    <Text className="text-red-500">Your answer</Text>
                  )}

                  {optIndex === question.correctAnswer && (
                    <Text className="text-green-500">Correct answer</Text>
                  )}
                </View>
              ))}
            </View>
          );
        })}

        <Pressable
          className="bg-blue-500 py-3 rounded-lg items-center mt-4"
          onPress={onComplete}
        >
          <Text className="text-white font-bold">Continue Learning</Text>
        </Pressable>
      </ScrollView>
    );
  }

  return (
    <ScrollView className="flex-1 p-6">
      <View className="flex-row items-center justify-between mb-6">
        <Text className="text-gray-500">
          Question {currentQuestionIndex + 1} of {totalQuestions}
        </Text>
        <View className="bg-gray-200 rounded-full h-2 w-[100px] overflow-hidden">
          <View
            className="bg-blue-500 h-full rounded-full"
            style={{
              width: `${((currentQuestionIndex + 1) / totalQuestions) * 100}%`,
            }}
          />
        </View>
      </View>

      <Text className="text-xl font-bold mb-6">{currentQuestion.question}</Text>

      {currentQuestion.options.map((option, index) => (
        <Pressable
          key={index}
          className={`p-4 mb-3 rounded-lg border ${selectedAnswers[currentQuestion.id] === index ? "border-blue-500 bg-blue-50" : "border-gray-200 bg-white"}`}
          onPress={() => handleSelectAnswer(index)}
        >
          <Text
            className={
              selectedAnswers[currentQuestion.id] === index
                ? "text-blue-800"
                : ""
            }
          >
            {option}
          </Text>
        </Pressable>
      ))}

      <Pressable
        className={`py-3 rounded-lg items-center mt-6 ${selectedAnswers[currentQuestion.id] !== undefined ? "bg-blue-500" : "bg-gray-300"}`}
        onPress={handleNextQuestion}
        disabled={selectedAnswers[currentQuestion.id] === undefined}
      >
        <Text className="text-white font-bold">
          {isLastQuestion ? "Finish Quiz" : "Next Question"}
        </Text>
      </Pressable>
    </ScrollView>
  );
}
